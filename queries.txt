
Table data:
select foundry.foundry_name, apps.name,apps.memory,apps.instances,apps.disk_space,apps.state,apps.cpu_used,apps.memory_used,apps.disk_used, spaces.space_name,orgs.org_name from grafana.foundries as foundry, grafana.pcf_apps as apps, grafana.pcf_org as orgs, grafana.pcf_space as spaces where apps.space_id = spaces.id and spaces.org_id = orgs.id and orgs.foundry_id = foundry.id and foundry.foundry_name in (${foundry_list}) and orgs.org_name in (${ORG_NAMES}) order by apps.memory_used desc, apps.state limit 10;


org-names:
select org_name from grafana.pcf_org

foundry_names:
select foundry_name from grafana.foundries



sample consumption gauge:
select foundries.memory_consumption_percent as memory, UNIX_TIMESTAMP(foundries.last_updated) as time_sec from grafana.foundries as foundries where foundries.foundry_name = 'sample-foundry';


select foundry.foundry_name, apps.name,apps.memory,apps.memory_consumption_percent, apps.instances,apps.disk_space,apps.state,apps.cpu_used,apps.memory_used,apps.disk_used, spaces.space_name,orgs.org_name from grafana.foundries as foundry, grafana.pcf_apps as apps, grafana.pcf_org as orgs, grafana.pcf_space as spaces where apps.space_id = spaces.id and spaces.org_id = orgs.id and orgs.foundry_id = foundry.id and foundry.foundry_name in (${foundry_list}) and orgs.org_name in (${ORG_NAMES}) and apps.memory_consumption_percent > (${greater_percent}) and  apps.memory_consumption_percent < (${less_percent}) order by apps.memory_consumption_percent;


&var-greater_percent=0&var-less_percent=100

select foundry.foundry_name, orgs.org_name, spaces.space_name, apps.name,apps.instances,apps.memory,apps.memory_used,apps.memory_consumption_percent,apps.disk_space,apps.disk_used,apps.cpu_used from grafana.foundries as foundry, grafana.pcf_apps as apps, grafana.pcf_org as orgs, grafana.pcf_space as spaces where apps.space_id = spaces.id and spaces.org_id = orgs.id and orgs.foundry_id = foundry.id and apps.is_historic is null and apps.state = 'STARTED' and foundry.foundry_name in (${foundry_list}) and orgs.org_name in (${ORG_NAMES}) and apps.memory_consumption_percent > (${greater_percent}) and  apps.memory_consumption_percent < (${less_percent}) order by apps.memory_consumption_percent;

trending-graph:
select UNIX_TIMESTAMP(apps.last_updated) as time_sec , apps.memory_used as value, 'memory-used' as metric from grafana.foundries as foundry, grafana.pcf_apps as apps, grafana.pcf_org as orgs, grafana.pcf_space as spaces where apps.space_id = spaces.id and spaces.org_id = orgs.id and orgs.foundry_id = foundry.id and apps.name in (${app_name}) and $__timeFilter(apps.last_updated)
ORDER BY apps.last_updated ASC;

